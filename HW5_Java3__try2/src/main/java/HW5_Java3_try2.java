import java.util.concurrent.Semaphore;

/**
 * Приведенный выше код перенести в новый проект.
 *
 * Организуем гонки:
 * Все участники должны стартовать одновременно, несмотря на то, что на подготовку у каждого их них уходит разное время.
 * В тоннель не может заехать одновременно больше половины участников (условность).
 * Попробуйте все это синхронизировать.
 * Только после того, как все завершат гонку, нужно выдать объявление об окончании.
 * Можете корректировать классы (в т.ч. конструктор машин) и добавлять объекты классов из пакета util.concurrent.
 *
 * Пример выполнения кода до корректировки:
 * ВАЖНОЕ ОБЪЯВЛЕНИЕ >>> Подготовка!!!
 * Участник #2 готовится
 * ВАЖНОЕ ОБЪЯВЛЕНИЕ >>> Гонка началась!!!
 * ВАЖНОЕ ОБЪЯВЛЕНИЕ >>> Гонка закончилась!!!
 * Участник #1 готовится
 * Участник #4 готовится
 * Участник #3 готовится
 * Участник #3 готов
 * Участник #3 начал этап: Дорога 60 метров
 * Участник #2 готов
 * Участник #2 начал этап: Дорога 60 метров
 * Участник #1 готов
 * Участник #1 начал этап: Дорога 60 метров
 * Участник #4 готов
 * Участник #4 начал этап: Дорога 60 метров
 * Участник #3 закончил этап: Дорога 60 метров
 * Участник #3 готовится к этапу (ждет): Тоннель 80 метров
 * Участник #3 начал этап: Тоннель 80 метров
 * Участник #2 закончил этап: Дорога 60 метров
 * Участник #2 готовится к этапу (ждет): Тоннель 80 метров
 * Участник #2 начал этап: Тоннель 80 метров
 * Участник #1 закончил этап: Дорога 60 метров
 * Участник #1 готовится к этапу (ждет): Тоннель 80 метров
 * Участник #1 начал этап: Тоннель 80 метров
 * Участник #4 закончил этап: Дорога 60 метров
 * Участник #4 готовится к этапу (ждет): Тоннель 80 метров
 * Участник #4 начал этап: Тоннель 80 метров
 * Участник #2 закончил этап: Тоннель 80 метров
 * Участник #2 начал этап: Дорога 40 метров
 * Участник #3 закончил этап: Тоннель 80 метров
 * Участник #3 начал этап: Дорога 40 метров
 * Участник #2 закончил этап: Дорога 40 метров
 * Участник #1 закончил этап: Тоннель 80 метров
 * Участник #1 начал этап: Дорога 40 метров
 * Участник #4 закончил этап: Тоннель 80 метров
 * Участник #4 начал этап: Дорога 40 метров
 * Участник #3 закончил этап: Дорога 40 метров
 * Участник #1 закончил этап: Дорога 40 метров
 * Участник #4 закончил этап: Дорога 40 метров
 *
 * Что примерно должно получиться
 * ВАЖНОЕ ОБЪЯВЛЕНИЕ >>> Подготовка!!!
 * Участник #2 готовится
 * Участник #1 готовится
 * Участник #4 готовится
 * Участник #3 готовится
 * Участник #2 готов
 * Участник #4 готов
 * Участник #1 готов
 * Участник #3 готов
 * ВАЖНОЕ ОБЪЯВЛЕНИЕ >>> Гонка началась!!!
 * Участник #2 начал этап: Дорога 60 метров
 * Участник #4 начал этап: Дорога 60 метров
 * Участник #3 начал этап: Дорога 60 метров
 * Участник #1 начал этап: Дорога 60 метров
 * Участник #1 закончил этап: Дорога 60 метров
 * Участник #3 закончил этап: Дорога 60 метров
 * Участник #3 готовится к этапу (ждет): Тоннель 80 метров
 * Участник #1 готовится к этапу (ждет): Тоннель 80 метров
 * Участник #1 начал этап: Тоннель 80 метров
 * Участник #3 начал этап: Тоннель 80 метров
 * Участник #4 закончил этап: Дорога 60 метров
 * Участник #4 готовится к этапу (ждет): Тоннель 80 метров
 * Участник #2 закончил этап: Дорога 60 метров
 * Участник #2 готовится к этапу (ждет): Тоннель 80 метров
 * Участник #3 закончил этап: Тоннель 80 метров
 * Участник #1 закончил этап: Тоннель 80 метров
 * Участник #2 начал этап: Тоннель 80 метров
 * Участник #4 начал этап: Тоннель 80 метров
 * Участник #3 начал этап: Дорога 40 метров
 * Участник #1 начал этап: Дорога 40 метров
 * Участник #3 закончил этап: Дорога 40 метров
 * Участник #3 - WIN
 * Участник #1 закончил этап: Дорога 40 метров
 * Участник #4 закончил этап: Тоннель 80 метров
 * Участник #4 начал этап: Дорога 40 метров
 * Участник #2 закончил этап: Тоннель 80 метров
 * Участник #2 начал этап: Дорога 40 метров
 * Участник #2 закончил этап: Дорога 40 метров
 * Участник #4 закончил этап: Дорога 40 метров
 * ВАЖНОЕ ОБЪЯВЛЕНИЕ >>> Гонка закончилась!!!
 */

public class HW5_Java3_try2 {
    public static final int CARS_COUNT = 4;
    public static int COUNT_READINESS;              //счетчик готовых
    public static boolean winner = false;              //счетчик завершивших гонку
    public static void main(String[] args) {
        System.out.println("ВАЖНОЕ ОБЪЯВЛЕНИЕ >>> Подготовка!!!");
        Race race = new Race(new Road(60), new Tunnel(), new Road(40)); //параметры гонки (трасса)
        Car[] cars = new Car[CARS_COUNT];
        Car.bandwidth = new Semaphore(CARS_COUNT/2);        //по туннелю может ехать одновременно половина участников
        Thread[] t = new Thread[CARS_COUNT];
        for (int i = 0; i < cars.length; i++) {                 //рандомный параметр скорости участнику от 20 до 30 км/ч
            cars[i] = new Car(race, 20 + (int) (Math.random() * 10));
        }
        for (int i = 0; i < cars.length; i++) {
            t[i] = new Thread(cars[i]);
            t[i].start();
        }

        while(COUNT_READINESS != CARS_COUNT) {           //бесконечная проверка, пока все не будут готовы
            COUNT_READINESS = 0;
            for(int i = 0; i<CARS_COUNT; i++) {
                if (cars[i].getReadiness()) {
                    COUNT_READINESS ++;
                }
            }
            if(COUNT_READINESS == CARS_COUNT) {
                System.out.println("ВАЖНОЕ ОБЪЯВЛЕНИЕ >>> Гонка началась!!!");
                Car.continueThread();
            }
        }

        while(!winner) {                                       //поиск победителя
            for(int i = 0; i<CARS_COUNT; i++) {
                if (cars[i].getNumOfEndedStage() == race.getNumOfStages()) {
                    System.out.println(cars[i].getName() + " WIN");
                    winner = true;
                }
            }
        }

        for (int i = 0; i < cars.length; i++) {
            try {
                t[i].join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
        System.out.println("ВАЖНОЕ ОБЪЯВЛЕНИЕ >>> Гонка закончилась!!!");

    }
}

//исходный редактируемый код задачи
//public class HW5_Java3_try2 {
//    public static final int CARS_COUNT = 4;
//    public static void main(String[] args) {
//        System.out.println("ВАЖНОЕ ОБЪЯВЛЕНИЕ >>> Подготовка!!!");
//        Race race = new Race(new Road(60), new Tunnel(), new Road(40));
//        Car[] cars = new Car[CARS_COUNT];
//        for (int i = 0; i < cars.length; i++) {
//            cars[i] = new Car(race, 20 + (int) (Math.random() * 10));
//        }
//        for (int i = 0; i < cars.length; i++) {
//            new Thread(cars[i]).start();
//        }
//        System.out.println("ВАЖНОЕ ОБЪЯВЛЕНИЕ >>> Гонка началась!!!");
//        System.out.println("ВАЖНОЕ ОБЪЯВЛЕНИЕ >>> Гонка закончилась!!!");
//    }
//}